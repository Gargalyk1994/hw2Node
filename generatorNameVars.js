// Написать свою собственную библиотеку и опубликовать в NPM.
// Что нужно помнить при реализации:
// — Ваш модуль должен обязательно экспортировать функции которые будут полезны вашим пользователям с помощью modules.exports
// — Не забудьте указать в package.json в поле main файл, который будет основным в вашей библиотеке
// — Обязательно создайте и опишите README.md файл в корне вашего проекта
// — Если у вас есть репозиторий в github или gitlab, опубликуйте туда ваш код и в package.json укажите ссылку на репозиторий в поле repository
// — Протестируйте работу вашей библиотеки после публикации. Попробуйте установить её в любом другом проекте с помощью npm i имявашейбиблиотеки и попробуйте ее использовать.

// Формат сдачи задания:
// — Достаточно прислать ссылку на сайт https://npmjs.com/ на вашу библиотеку.

// Идеи для библиотеки:
// — Библиотека для генерации случайных данных, таких как имена, адреса, даты, числа и т.д. Это может быть полезно для тестирования или создания заглушек данных.
// — Библиотека для работы с математикой: например функции для решения квадратных уравнений.
// — Библиотека для генерации паролей, которая позволяет генерировать случайные и безопасные пароли. Можно реализовать методы для указания длины пароля, использования различных типов символов (буквы, цифры, специальные символы) и т.д.


//Моя идея перевод с русского на английский слов переданных в ф-ию. И автоматическая генерация этих слов в camalCase или snackCase для нейминга переменных. Воспользовавшись другой библиотекой translate для перевода.


import translate from "translate";

async function toCamalCase(str){
    translate.engine = "google"; // "google", "yandex", "libre", "deepl"
    translate.from = "ru";
    translate.key = process.env.TRANSLATE_KEY ;
    const translateStr = await translate(str, "en");
    translateStr
        .split(" ") // по пробелу разделяем строку и добавляем в массив
        .map((word) => word.charAt(0).toUpperCase() + word.substr(1)) //заглавная первая буква + остальное от слова со 2 символа
        .join(""); // по пробелу обратно добавляем в строку
}
console.log(toCamalCase('Строка состояния'));

async function toSnakeCase(str){
    translate.engine = "google"; // "google", "yandex", "libre", "deepl"
    translate.from = "ru";
    translate.key = process.env.DEEPL_KEY;
    const translateStr = await translate(str, "en");
    str
        .toLowerCase()
        .split(" ") // по пробелу разделяем строку и добавляем в массив
        .join("_"); // по пробелу обратно добавляем в строку
}
console.log(toSnakeCase('Строка состояния'));

module.exports = {toCamalCase, toSnakeCase};